name: windows
description: template used to build for windows

inputs:
  arch:
    required: true
    type: string
  rust-arch:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Get Vcpkg current hash
      shell: pwsh
      run: |
        $vcpkg_commit_id = git -C ${Env:VCPKG_INSTALLATION_ROOT} rev-parse --short HEAD
        echo vcpkg-current-hash=$vcpkg_commit_id >> $env:GITHUB_ENV

    - name: Cache Vcpkg packages
      uses: actions/cache@v4
      with:
        path: ./vcpkg_installed/${{ inputs.arch }}-windows
        key: ${{ runner.os }}-${{ inputs.arch }}-vcpkg-${{ env.vcpkg-current-hash }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.arch }}-vcpkg-${{ env.vcpkg-current-hash }}-
          ${{ runner.os }}-${{ inputs.arch }}-vcpkg-
          ${{ runner.os }}-${{ inputs.arch }}-

    - name: Install dependencies
      shell: pwsh
      run: |
        $vcpkg_path = (Join-Path ${Env:VCPKG_INSTALLATION_ROOT} vcpkg.exe)
        &$vcpkg_path --triplet ${{ inputs.arch }}-windows install

    - name: Install nightly toolchain
      shell: pwsh
      run: rustup toolchain install nightly-${{ inputs.rust-arch }}-pc-windows-msvc --component rust-src

    - name: Cache rust dependencies
      uses: actions/cache@v4
      env:
        CARGO_HOME: ~/.cargo
        cache-name: cache-rust-dependencies
      with:
        path: |
          ${{ env.CARGO_HOME }}/.crates.toml
          ${{ env.CARGO_HOME }}/.crates2.json
          ${{ env.CARGO_HOME }}/bin
          ${{ env.CARGO_HOME }}/registry/index
          ${{ env.CARGO_HOME }}/registry/cache
          ${{ env.CARGO_HOME }}/git/db
        key: ${{ env.cache-name }}-${{ runner.os }}-${{ inputs.arch }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ env.cache-name }}-${{ runner.os }}-${{ inputs.arch }}-build-
          ${{ env.cache-name }}-${{ runner.os }}-${{ inputs.arch }}-
          ${{ env.cache-name }}-${{ runner.os }}-
          ${{ env.cache-name }}-          

    - name: Set platform triplet
      shell: pwsh
      run: echo rust-triplet=${{ inputs.rust-arch }}-pc-windows-msvc

    - name: Build
      shell: pwsh
      run: |
        $Env:SOXR_LINK_SEARCH = '.\vcpkg_installed\${{ inputs.arch }}-windows\lib'
        cargo +nightly-${{ env.rust-triplet }} -Z build-std=std,panic_abort build --release --target=${{ env.rust-triplet }}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: sms-windows-${{ inputs.arch }}-release
        if-no-files-found: error
        path: ./target/${{ env.rust-triplet }}/release/libc_second_music_system.lib
